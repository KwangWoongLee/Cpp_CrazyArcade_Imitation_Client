// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: match.proto
#ifndef GRPC_match_2eproto__INCLUDED
#define GRPC_match_2eproto__INCLUDED

#include "match.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class MatchService final {
 public:
  static constexpr char const* service_full_name() {
    return "MatchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // node 2 match(game)
    virtual ::grpc::Status GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::GetServerListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>> AsyncGetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>>(AsyncGetServerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>> PrepareAsyncGetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>>(PrepareAsyncGetServerListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::GetRoomListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>> AsyncGetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>>(AsyncGetRoomListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>> PrepareAsyncGetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>>(PrepareAsyncGetRoomListRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::CreateRoomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>> AsyncCreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::EnterRoomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>> AsyncEnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>>(AsyncEnterRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>> PrepareAsyncEnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>>(PrepareAsyncEnterRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status StartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncStartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncStartGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncStartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncStartGameRaw(context, request, cq));
    }
    // match 2 node(chat)
    // rpc EnterUser (EnteredRoomInfo) returns (Response) {}; // 같은방에서의 채팅만 허용
    // rpc LeaveUser (PUser) returns (Response) {};
    //
    // match 2 tcp
    // rpc CreateRoomTCP (CreateRoomTCPRequest) returns (stream CreateRoomTCPResponse) {}; // User의 region 확인해서 가능한 서버에서 룸 생성
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> RoomJobTCP(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(RoomJobTCPRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> AsyncRoomJobTCP(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(AsyncRoomJobTCPRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> PrepareAsyncRoomJobTCP(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(PrepareAsyncRoomJobTCPRaw(context, cq));
    }
    // tcp 2 match
    virtual ::grpc::Status RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::RegistServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>> AsyncRegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>>(AsyncRegistServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>> PrepareAsyncRegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>>(PrepareAsyncRegistServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // node 2 match(game)
      virtual void GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartGame(::grpc::ClientContext* context, const ::StartGameRequest* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartGame(::grpc::ClientContext* context, const ::StartGameRequest* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // match 2 node(chat)
      // rpc EnterUser (EnteredRoomInfo) returns (Response) {}; // 같은방에서의 채팅만 허용
      // rpc LeaveUser (PUser) returns (Response) {};
      //
      // match 2 tcp
      // rpc CreateRoomTCP (CreateRoomTCPRequest) returns (stream CreateRoomTCPResponse) {}; // User의 region 확인해서 가능한 서버에서 룸 생성
      virtual void RoomJobTCP(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RoomJobTCPRequest,::RoomJobTCPResponse>* reactor) = 0;
      // tcp 2 match
      virtual void RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>* AsyncGetServerListRaw(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetServerListResponse>* PrepareAsyncGetServerListRaw(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>* AsyncGetRoomListRaw(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetRoomListResponse>* PrepareAsyncGetRoomListRaw(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateRoomResponse>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>* AsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EnterRoomResponse>* PrepareAsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncStartGameRaw(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncStartGameRaw(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* RoomJobTCPRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* AsyncRoomJobTCPRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* PrepareAsyncRoomJobTCPRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>* AsyncRegistServerRaw(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegistServerResponse>* PrepareAsyncRegistServerRaw(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::GetServerListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>> AsyncGetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>>(AsyncGetServerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>> PrepareAsyncGetServerList(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>>(PrepareAsyncGetServerListRaw(context, request, cq));
    }
    ::grpc::Status GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::GetRoomListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>> AsyncGetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>>(AsyncGetRoomListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>> PrepareAsyncGetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>>(PrepareAsyncGetRoomListRaw(context, request, cq));
    }
    ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::CreateRoomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>> AsyncCreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    ::grpc::Status EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::EnterRoomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>> AsyncEnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>>(AsyncEnterRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>> PrepareAsyncEnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>>(PrepareAsyncEnterRoomRaw(context, request, cq));
    }
    ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    ::grpc::Status StartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncStartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncStartGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncStartGame(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncStartGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> RoomJobTCP(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(RoomJobTCPRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> AsyncRoomJobTCP(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(AsyncRoomJobTCPRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>> PrepareAsyncRoomJobTCP(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>>(PrepareAsyncRoomJobTCPRaw(context, cq));
    }
    ::grpc::Status RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::RegistServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>> AsyncRegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>>(AsyncRegistServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>> PrepareAsyncRegistServer(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>>(PrepareAsyncRegistServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServerList(::grpc::ClientContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRoomList(::grpc::ClientContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRoom(::grpc::ClientContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response, std::function<void(::grpc::Status)>) override;
      void EnterRoom(::grpc::ClientContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::LeaveRoomRequest* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartGame(::grpc::ClientContext* context, const ::StartGameRequest* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void StartGame(::grpc::ClientContext* context, const ::StartGameRequest* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RoomJobTCP(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RoomJobTCPRequest,::RoomJobTCPResponse>* reactor) override;
      void RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response, std::function<void(::grpc::Status)>) override;
      void RegistServer(::grpc::ClientContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>* AsyncGetServerListRaw(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetServerListResponse>* PrepareAsyncGetServerListRaw(::grpc::ClientContext* context, const ::GetServerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>* AsyncGetRoomListRaw(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetRoomListResponse>* PrepareAsyncGetRoomListRaw(::grpc::ClientContext* context, const ::GetRoomListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateRoomResponse>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>* AsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EnterRoomResponse>* PrepareAsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnterRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::LeaveRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncStartGameRaw(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncStartGameRaw(::grpc::ClientContext* context, const ::StartGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* RoomJobTCPRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* AsyncRoomJobTCPRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* PrepareAsyncRoomJobTCPRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>* AsyncRegistServerRaw(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegistServerResponse>* PrepareAsyncRegistServerRaw(::grpc::ClientContext* context, const ::RegistServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoomList_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_EnterRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_StartGame_;
    const ::grpc::internal::RpcMethod rpcmethod_RoomJobTCP_;
    const ::grpc::internal::RpcMethod rpcmethod_RegistServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // node 2 match(game)
    virtual ::grpc::Status GetServerList(::grpc::ServerContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response);
    virtual ::grpc::Status GetRoomList(::grpc::ServerContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response);
    virtual ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response);
    virtual ::grpc::Status EnterRoom(::grpc::ServerContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response);
    virtual ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::LeaveRoomRequest* request, ::Response* response);
    virtual ::grpc::Status StartGame(::grpc::ServerContext* context, const ::StartGameRequest* request, ::Response* response);
    // match 2 node(chat)
    // rpc EnterUser (EnteredRoomInfo) returns (Response) {}; // 같은방에서의 채팅만 허용
    // rpc LeaveUser (PUser) returns (Response) {};
    //
    // match 2 tcp
    // rpc CreateRoomTCP (CreateRoomTCPRequest) returns (stream CreateRoomTCPResponse) {}; // User의 region 확인해서 가능한 서버에서 룸 생성
    virtual ::grpc::Status RoomJobTCP(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* stream);
    // tcp 2 match
    virtual ::grpc::Status RegistServer(::grpc::ServerContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerList(::grpc::ServerContext* context, ::GetServerListRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetServerListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoomList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomList(::grpc::ServerContext* context, ::GetRoomListRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetRoomListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::CreateRoomRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateRoomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EnterRoom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterRoom(::grpc::ServerContext* context, ::EnterRoomRequest* request, ::grpc::ServerAsyncResponseWriter< ::EnterRoomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::LeaveRoomRequest* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartGame() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartGame(::grpc::ServerContext* context, ::StartGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RoomJobTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RoomJobTCP() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RoomJobTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RoomJobTCP(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRoomJobTCP(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegistServer() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistServer(::grpc::ServerContext* context, ::RegistServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::RegistServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServerList<WithAsyncMethod_GetRoomList<WithAsyncMethod_CreateRoom<WithAsyncMethod_EnterRoom<WithAsyncMethod_LeaveRoom<WithAsyncMethod_StartGame<WithAsyncMethod_RoomJobTCP<WithAsyncMethod_RegistServer<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GetServerListRequest, ::GetServerListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetServerListRequest* request, ::GetServerListResponse* response) { return this->GetServerList(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerList(
        ::grpc::MessageAllocator< ::GetServerListRequest, ::GetServerListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetServerListRequest, ::GetServerListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerList(
      ::grpc::CallbackServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoomList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetRoomListRequest, ::GetRoomListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetRoomListRequest* request, ::GetRoomListResponse* response) { return this->GetRoomList(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoomList(
        ::grpc::MessageAllocator< ::GetRoomListRequest, ::GetRoomListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetRoomListRequest, ::GetRoomListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomList(
      ::grpc::CallbackServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRoom() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateRoomRequest, ::CreateRoomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CreateRoomRequest* request, ::CreateRoomResponse* response) { return this->CreateRoom(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRoom(
        ::grpc::MessageAllocator< ::CreateRoomRequest, ::CreateRoomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateRoomRequest, ::CreateRoomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EnterRoom() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::EnterRoomRequest, ::EnterRoomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EnterRoomRequest* request, ::EnterRoomResponse* response) { return this->EnterRoom(context, request, response); }));}
    void SetMessageAllocatorFor_EnterRoom(
        ::grpc::MessageAllocator< ::EnterRoomRequest, ::EnterRoomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EnterRoomRequest, ::EnterRoomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::LeaveRoomRequest, ::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LeaveRoomRequest* request, ::Response* response) { return this->LeaveRoom(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveRoom(
        ::grpc::MessageAllocator< ::LeaveRoomRequest, ::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LeaveRoomRequest, ::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartGame() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::StartGameRequest, ::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StartGameRequest* request, ::Response* response) { return this->StartGame(context, request, response); }));}
    void SetMessageAllocatorFor_StartGame(
        ::grpc::MessageAllocator< ::StartGameRequest, ::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StartGameRequest, ::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartGame(
      ::grpc::CallbackServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RoomJobTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RoomJobTCP() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::RoomJobTCPRequest, ::RoomJobTCPResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->RoomJobTCP(context); }));
    }
    ~WithCallbackMethod_RoomJobTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RoomJobTCP(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::RoomJobTCPRequest, ::RoomJobTCPResponse>* RoomJobTCP(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegistServer() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::RegistServerRequest, ::RegistServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RegistServerRequest* request, ::RegistServerResponse* response) { return this->RegistServer(context, request, response); }));}
    void SetMessageAllocatorFor_RegistServer(
        ::grpc::MessageAllocator< ::RegistServerRequest, ::RegistServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RegistServerRequest, ::RegistServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistServer(
      ::grpc::CallbackServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServerList<WithCallbackMethod_GetRoomList<WithCallbackMethod_CreateRoom<WithCallbackMethod_EnterRoom<WithCallbackMethod_LeaveRoom<WithCallbackMethod_StartGame<WithCallbackMethod_RoomJobTCP<WithCallbackMethod_RegistServer<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoomList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EnterRoom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartGame() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RoomJobTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RoomJobTCP() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RoomJobTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RoomJobTCP(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegistServer() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoomList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EnterRoom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartGame() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RoomJobTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RoomJobTCP() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RoomJobTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RoomJobTCP(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRoomJobTCP(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegistServer() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoomList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoomList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRoom() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EnterRoom() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EnterRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartGame() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RoomJobTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RoomJobTCP() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->RoomJobTCP(context); }));
    }
    ~WithRawCallbackMethod_RoomJobTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RoomJobTCP(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::RoomJobTCPResponse, ::RoomJobTCPRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RoomJobTCP(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegistServer() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegistServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetServerListRequest, ::GetServerListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetServerListRequest, ::GetServerListResponse>* streamer) {
                       return this->StreamedGetServerList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerList(::grpc::ServerContext* /*context*/, const ::GetServerListRequest* /*request*/, ::GetServerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetServerListRequest,::GetServerListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoomList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetRoomListRequest, ::GetRoomListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetRoomListRequest, ::GetRoomListResponse>* streamer) {
                       return this->StreamedGetRoomList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::GetRoomListRequest* /*request*/, ::GetRoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoomList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetRoomListRequest,::GetRoomListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateRoomRequest, ::CreateRoomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateRoomRequest, ::CreateRoomResponse>* streamer) {
                       return this->StreamedCreateRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreateRoomRequest* /*request*/, ::CreateRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateRoomRequest,::CreateRoomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EnterRoom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EnterRoomRequest, ::EnterRoomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EnterRoomRequest, ::EnterRoomResponse>* streamer) {
                       return this->StreamedEnterRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnterRoomRequest* /*request*/, ::EnterRoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnterRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnterRoomRequest,::EnterRoomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LeaveRoomRequest, ::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LeaveRoomRequest, ::Response>* streamer) {
                       return this->StreamedLeaveRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::LeaveRoomRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LeaveRoomRequest,::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartGame() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StartGameRequest, ::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StartGameRequest, ::Response>* streamer) {
                       return this->StreamedStartGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::StartGameRequest* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartGameRequest,::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegistServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegistServer() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RegistServerRequest, ::RegistServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RegistServerRequest, ::RegistServerResponse>* streamer) {
                       return this->StreamedRegistServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegistServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegistServer(::grpc::ServerContext* /*context*/, const ::RegistServerRequest* /*request*/, ::RegistServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RegistServerRequest,::RegistServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetServerList<WithStreamedUnaryMethod_GetRoomList<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_EnterRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_StartGame<WithStreamedUnaryMethod_RegistServer<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetServerList<WithStreamedUnaryMethod_GetRoomList<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_EnterRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_StartGame<WithStreamedUnaryMethod_RegistServer<Service > > > > > > > StreamedService;
};


#endif  // GRPC_match_2eproto__INCLUDED
